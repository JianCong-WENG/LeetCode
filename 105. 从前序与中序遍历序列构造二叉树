根据一棵树的前序遍历与中序遍历构造二叉树。

注意:
你可以假设树中没有重复的元素。

例如，给出

前序遍历 preorder = [3,9,20,15,7]
中序遍历 inorder = [9,3,15,20,7]
返回如下的二叉树：

    3
   / \
  9  20
    /  \
   15   7

思路：先序遍历的方式构建树，根据前序遍历知道根；根据中序遍历与根知道前序遍历的的左右边界
C++：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    unordered_map<int, int> index;
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        for(int i=0; i<inorder.size(); i++){
            index[inorder[i]] = i;
        }
        return myBuildTree(preorder, inorder, 0, preorder.size()-1, 0, inorder.size()-1);

    }

    TreeNode* myBuildTree(vector<int>& preorder, vector<int>& inorder, int pre_left, int pre_right, int in_left, int in_right){
        if(pre_left > pre_right) return nullptr;

        //从前序遍历获取根节点索引
        int pre_root_index = pre_left;
        //从中序遍历获取根节点
        TreeNode* root = new TreeNode;
        //先序遍历，先对root赋值
        root->val = preorder[pre_root_index];
        //获取root的index，并进行划分
        int root_index = index[preorder[pre_root_index]];
        int left_num = root_index - in_left;
        int right_num = in_right - root_index;
        //分别构建左子树和右子树
        root->left = myBuildTree(preorder, inorder, pre_root_index+1,  pre_root_index+left_num, in_left, root_index-1);
        root->right = myBuildTree(preorder, inorder, pre_root_index+left_num+1, pre_right, root_index+1, in_right);
        return root;
        
    }


};
