根据一棵树的中序遍历与后序遍历构造二叉树。

注意:
你可以假设树中没有重复的元素。

例如，给出

中序遍历 inorder = [9,3,15,20,7]
后序遍历 postorder = [9,15,7,20,3]
返回如下的二叉树：

    3
   / \
  9  20
    /  \
   15   7

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    private:
        unordered_map<int, int> index;
    public:
        TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
            for(int i=0; i<inorder.size(); i++){
                index[inorder[i]] = i;
            }
            return myBuildTree(postorder, inorder, 0, postorder.size()-1, 0, inorder.size()-1);

        }

        TreeNode* myBuildTree(vector<int>& postorder, vector<int>& inorder, int post_left, int post_right, int in_left, int in_right){
            if(post_left > post_right) return nullptr;

            //从后序遍历获取根节点索引
            int post_root_index = post_right;
            //从中序遍历获取根节点
            TreeNode* root = new TreeNode;
            //先序遍历，先对root赋值
            root->val = postorder[post_root_index];
            //获取root的index，并进行划分
            int root_index = index[postorder[post_root_index]];
            int left_num = root_index - in_left;
            int right_num = in_right - root_index;
            //分别构建左子树和右子树
            root->left = myBuildTree(postorder, inorder, post_left,  post_left+left_num-1, in_left, root_index-1);
            root->right = myBuildTree(postorder, inorder, post_left+left_num, post_root_index-1, root_index+1, in_right);
            return root;
            
        }
    };
