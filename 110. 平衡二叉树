给定一个二叉树，判断它是否是高度平衡的二叉树。

本题中，一棵高度平衡二叉树定义为：

一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1 。

 

示例 1：


输入：root = [3,9,20,null,null,15,7]
输出：true
示例 2：


输入：root = [1,2,2,3,3,null,null,4,4]
输出：false
示例 3：

输入：root = []
输出：true
 

提示：

树中的节点数在范围 [0, 5000] 内
-104 <= Node.val <= 104

思路一：自顶而下。写一个计算高度的递归函数，isBalanced依然递归判断。时间复杂度是O（n*n）
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isBalanced(TreeNode* root) {
        if(root == nullptr) return true;
        if(abs(treeHigh(root->left) - treeHigh(root->right)) > 1){
            return false;
        }
        return isBalanced(root->left) && isBalanced(root->right);

    }

    int treeHigh(TreeNode* root){
        if(root == nullptr) return 0;
        return max(treeHigh(root->left), treeHigh(root->right)) + 1;
    }
};

思路二：自底而上，递归函数在计算高度的同时判断是否平衡，不平衡返回-1，平衡返回高度
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isBalanced(TreeNode* root) {
        if(treeHighBalanced(root) > -1) return true;
        return false;

    }

    int treeHighBalanced(TreeNode* root){
        if(root == nullptr) return 0;
        int left_left = treeHighBalanced(root->left);
        int left_right = treeHighBalanced(root->right);
        if(left_left == -1 || left_right == -1 || abs(left_left - left_right) > 1){
            return -1;
        }
        return max(left_left, left_right) + 1;
    }
};
