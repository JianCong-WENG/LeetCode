给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。

说明: 叶子节点是指没有子节点的节点。

示例:
给定如下二叉树，以及目标和 sum = 22，

              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
返回:

[
   [5,4,11,2],
   [5,8,4,5]
]

C++:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    vector<vector<int>> path_sum;
public:
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        vector<int> path;
        recur(path, root, targetSum);
        return path_sum;
    }

    void recur(vector<int> path, TreeNode* root, int targetSum){
        if(root == nullptr) return;
        if(root->left == nullptr && root->right == nullptr){
            if(root->val == targetSum){
                path.push_back(root->val);
                path_sum.push_back(path);
            }
        }else{
            path.push_back(root->val);
            recur(path, root->left, targetSum-root->val);
            recur(path, root->right, targetSum-root->val);
        }
        return;
    }
};
