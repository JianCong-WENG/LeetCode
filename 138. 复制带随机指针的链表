138. 复制带随机指针的链表

给定一个链表，每个节点包含一个额外增加的随机指针，该指针可以指向链表中的任何节点或空节点。

要求返回这个链表的 深拷贝。 

我们用一个由 n 个节点组成的链表来表示输入/输出中的链表。每个节点用一个 [val, random_index] 表示：

val：一个表示 Node.val 的整数。
random_index：随机指针指向的节点索引（范围从 0 到 n-1）；如果不指向任何节点，则为  null 。
 

示例 1

输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]
输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]

思路：建立一个hash表，存放 老节点->新节点，其中新节点的next，random指针初始化为空，然后后续所有的指针赋值操作均在hash表里面进行。
新建hash表的目的：
1. 建立副本
2. 建立老节点->新节点对应关系，并且能够快速索引
亮点：用老节点作为key值，新节点作为value值

"""
# Definition for a Node.
class Node:
    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):
        self.val = int(x)
        self.next = next
        self.random = random
"""

class Solution:
    def copyRandomList(self, head: 'Node') -> 'Node':
        if not head:
            return None
        check = {}
        old = head
        while old:
            # 建立当前指针新老关系
            if old not in check:
                check[old] = Node(old.val, None, None)
            
            if old.next:
                # 建立old.next对象
                if old.next not in check:
                    check[old.next] = Node(old.next.val, None, None)
                # 填充next指针
                check[old].next = check[old.next]

            if old.random:
                # 建立old.random对象
                if old.random not in check:
                    check[old.random] = Node(old.random.val, None, None)
                # 填充random指针
                check[old].random = check[old.random]
            
            old = old.next
        return check[head]
