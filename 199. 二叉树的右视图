给定一棵二叉树，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。

示例:

输入: [1,2,3,null,5,null,4]
输出: [1, 3, 4]
解释:

   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---
  
 
 思路：广度优先遍历

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        queue<TreeNode*> help_queue;
        vector<int> res;
        if(root == nullptr) return res;
        help_queue.push(root);
        while(!help_queue.empty()){
            int range = help_queue.size();
            for(int i=0; i<range; i++){
                TreeNode* tmp = help_queue.front();
                help_queue.pop();
                if(i == range-1){
                    res.push_back(tmp->val);
                }
                if(tmp->left != nullptr){
                    help_queue.push(tmp->left);
                }
                if(tmp->right != nullptr){
                    help_queue.push(tmp->right);
                }
            }
        }
        return res;
    }
};
