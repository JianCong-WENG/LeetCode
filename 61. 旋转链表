61. 旋转链表

给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。

示例 1:

输入: 1->2->3->4->5->NULL, k = 2
输出: 4->5->1->2->3->NULL
解释:
向右旋转 1 步: 5->1->2->3->4->NULL
向右旋转 2 步: 4->5->1->2->3->NULL
示例 2:

输入: 0->1->2->NULL, k = 4
输出: 2->0->1->NULL
解释:
向右旋转 1 步: 2->0->1->NULL
向右旋转 2 步: 1->2->0->NULL
向右旋转 3 步: 0->1->2->NULL
向右旋转 4 步: 2->0->1->NULL

思路：1. 链表成环； 2. 计算断裂位置； 3. 断裂位置指向空
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def rotateRight(self, head: ListNode, k: int) -> ListNode:
        if not head:
            return head

        Thead = ListNode(0)
        Thead.next = head
        list_len = 1
        # 成环，计算链表长度
        while head.next:
            head = head.next
            list_len += 1
        head.next = Thead.next
        # 计算断环位置
        shift = list_len - (k % list_len)
        for index in range(shift):
            head = head.next
        # 移动头指针
        Thead.next = head.next
        # 断环位置指向空
        head.next = None
        return Thead.next
