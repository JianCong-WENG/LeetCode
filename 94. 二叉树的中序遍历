给定一个二叉树的根节点 root ，返回它的 中序 遍历。

 
思路一：深度遍历，递归实现
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> res;
        recur(root, res);
        return res;
    }

    void recur(TreeNode* root, vector<int>& res){
        if(root == nullptr) return;
        recur(root->left, res);
        res.push_back(root->val);
        recur(root->right, res);
    }
};

思路二：深度遍历，非递归实现
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> res;
        if(root==nullptr) return res;
        stack<TreeNode*> help_stack;
        while(!help_stack.empty() || root){
            if(root){
                help_stack.push(root);
                root = root->left;
            }else if(!help_stack.empty()){
                TreeNode* tmp = help_stack.top();
                 help_stack.pop();
                 res.push_back(tmp->val);
                 root = tmp->right;
            }
        }
        return res;

    }
};
