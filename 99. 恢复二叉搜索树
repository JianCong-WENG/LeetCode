给你二叉搜索树的根节点 root ，该树中的两个节点被错误地交换。请在不改变其结构的情况下，恢复这棵树。

进阶：使用 O(n) 空间复杂度的解法很容易实现。你能想出一个只使用常数空间的解决方案吗？

 

示例 1：


输入：root = [1,3,null,null,2]
输出：[3,1,null,null,2]
解释：3 不能是 1 左孩子，因为 3 > 1 。交换 1 和 3 使二叉搜索树有效。
示例 2：


输入：root = [3,1,4,null,null,2]
输出：[2,1,4,null,null,3]
解释：2 不能在 3 的右子树中，因为 2 < 3 。交换 2 和 3 使二叉搜索树有效。

思路：显式中序遍历
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void recoverTree(TreeNode* root) {
        vector<int> nums;
        inorder(root, nums);
        pair<int, int> pair_xy = findTwoReverse(nums);
        rebuild(root, pair_xy.first, pair_xy.second);
        return;
    }

    void inorder(TreeNode* root, vector<int>& nums){
        if(root == nullptr) return;
        inorder(root->left, nums);
        nums.push_back(root->val);
        inorder(root->right, nums);
    }

    pair<int, int> findTwoReverse(vector<int>& nums){
        int x = -1;
        int y = -1;
        for(int i=0; i<nums.size()-1; ++i){
            if(nums[i+1] < nums[i]){
                y = nums[i+1];
                if(x == -1){
                    x = nums[i];
                }else break;
            }
        }
        return {x, y};
    }

    void rebuild(TreeNode* root, int x, int y){
        if(root == nullptr) return;
        if(root != nullptr){
            if(root->val == x || root->val == y){
                root->val = root->val == x ? y : x;
            }
        }
        rebuild(root->left, x, y);
        rebuild(root->right, x, y);
    }
};
