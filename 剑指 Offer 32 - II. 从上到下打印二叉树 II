从上到下按层打印二叉树，同一层的节点按从左到右的顺序打印，每一层打印到一行。

 

例如:
给定二叉树: [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回其层次遍历结果：

[
  [3],
  [9,20],
  [15,7]
]

思路：BFS广度优先遍历；利用辅助队列；在每次将要下一层的元素加入队列之前，先计算本层节点个数并且记录在tmp数据；

C++ 代码：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        queue<TreeNode*> que;
        vector<vector<int> > res;
        vector<int> tmp;
        if(!root) return res;
        que.push(root);
        while(!que.empty()){
            int range = que.size();
            for(int i=0; i<range; i++){
                TreeNode* top = que.front();
                tmp.push_back(top->val);
                que.pop();
                if(top->left) que.push(top->left);
                if(top->right) que.push(top->right);
            }
            res.push_back(tmp);
            tmp.clear();
        }
        return res;

    }
};
