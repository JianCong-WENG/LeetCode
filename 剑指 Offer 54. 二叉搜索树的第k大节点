给定一棵二叉搜索树，请找出其中第k大的节点。

 

示例 1:

输入: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
输出: 4
示例 2:

输入: root = [5,3,6,2,4,null,null,1], k = 3
       5
      / \
     3   6
    / \
   2   4
  /
 1
输出: 4

思路：二叉搜索树的中序遍历具有升序性质，中序逆序遍历具有降序性质；

C++ code：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void dfsRe(TreeNode* root, vector<int>& res){
        if(!root) return;
        dfsRe(root->right, res);
        res.push_back(root->val);
        dfsRe(root->left, res);
    }
    int kthLargest(TreeNode* root, int k) {
        vector<int> res;
        dfsRe(root, res);
        return res[k-1];
    }
};
