输入一棵二叉树的根节点，求该树的深度。从根节点到叶节点依次经过的节点（含根、叶节点）形成树的一条路径，最长路径的长度为树的深度。

例如：

给定二叉树 [3,9,20,null,null,15,7]，

    3
   / \
  9  20
    /  \
   15   7
返回它的最大深度 3 。

思路：DFS深度优先遍历

C++ code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int maxDepth(TreeNode* root) {
            if(!root) return 0;
            return max(maxDepth(root->left), maxDepth(root->right)) + 1;
    }
};

思路：广度优先遍历
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxDepth(TreeNode* root) {
        if(root == nullptr) return 0;
        
        vector<TreeNode*> help_vector;
        queue<TreeNode*> help_queue;
        int max_depth = 0;
        help_queue.push(root);
        while(!help_queue.empty()){
            max_depth ++;
            int range = help_queue.size();
            for(int i=0; i<range; i++){
                TreeNode* tmp_node = help_queue.front();
                help_queue.pop();
                help_vector.push_back(tmp_node);
                if(tmp_node->left != nullptr) help_queue.push(tmp_node->left);
                if(tmp_node->right != nullptr) help_queue.push(tmp_node->right);
            }
            help_vector.clear();
        }
        
        return max_depth;
    }
};
